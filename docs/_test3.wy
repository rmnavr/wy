
    : p> abs neg str
     \[1 2 3]

    pupos
    ~@ x

    : plus 3 :: str

    defclass [] TestClass []
        :    #^ int x
        setv #^ int y 3.0
        ;-------------------------------
        defn __str__
            L self #^ x 1 #^ y 3
            (print 3)

    defn [] addNumbers
        L   #^ int L x 3
            #^ int L y 4
            #^ (of List int) #* args
            #** kwargs
        setv sumArgs : ->> args (reduce plus) (flip div 2)
        setv sumArgs : p> (reduce plus) (flip div 2)
        return


    ; $ должно закрывать все скобки на строке

    import sys
    . sys.stdout : reconfigure :encoding "utf-8"

    require hyrule L of as-> -> ->> doto case branch unless lif do_n list_n ncut
    import  _hyextlink *
    require _hyextlink L f:: fm p> pluckm lns &+ &+> l> l>=

    setv data L L 1 2 3 LL 4 5 6 LL 7 8 9

    ; this means that directly after $/$$ line there cannot be +indent (and it makes sense)

    ; $ is needed to close all inline : and such

    lmap : fm : * %1 2 $ [1 2 3]

    lmap : fm : * %1 2
       [1 2 3]

    (lmap (fm (* %1 2)) [1 2 3])

    : lmap : fm : * %1 2 $ [1 2 3]

    print x y $ \z
    (print x y z)

    ; $$ is needed to make a function from line

    p> abs neg str $$ [1 2 3]


    lns 1 2 (Each) (collect) $$ \x y

    : lns 1 2 (Each) (collect)
     \x y

